using System.Diagnostics;
using System.Drawing;
using System.Runtime.InteropServices;
using Windows.Win32;

namespace Multitool.Interop
{
    /// <summary>
    /// Class to hold p/invoke wrapper methods generated by Win32 C# projections.
    /// </summary>
    public static class InteropWrapper
    {
        [DllImport("user32.dll")]
        static extern bool GetCursorPos(out ulong _lpPoint);

        /// <summary>
        /// Get the absolute current cursor position as a <see cref="Point"/>.
        /// </summary>
        /// <returns>The absolute cursor position</returns>
        public static Point GetCursorPosition()
        {
            if (!GetCursorPos(out ulong pos))
            {
                throw InteropHelper.GetLastError("Failed to get cursor position ('GetCursorPos')");
            }
            int x = (int)(pos & 0x00000000FFFFFFFF);
            int y = (int)((pos & 0xFFFFFFFF00000000) >> 32);
            return new Point(x, y);
        }

        /// <summary>
        /// Get the absolute current cursor position.
        /// </summary>
        /// <param name="x">to hold the x position of the cursor</param>
        /// <param name="y">to hold the y position of the cursor</param>
        public static void GetCursorPosition(out int x, out int y)
        {
            if (!GetCursorPos(out ulong pos))
            {
                throw InteropHelper.GetLastError("Failed to get cursor position ('GetCursorPos')");
            }
            x = (int)(pos & 0x00000000FFFFFFFF);
            y = (int)((pos & 0xFFFFFFFF00000000) >> 32);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="extension">Extension to get the executables associated with.</param>
        public static void GetFileAssociation(string extension)
        {
            uint size = 0;
            var assoc = new Windows.Win32.Foundation.PWSTR();
            var result = PInvoke.AssocQueryString(0, 
                Windows.Win32.UI.Shell.ASSOCSTR.ASSOCSTR_EXECUTABLE, 
                extension, 
                null, 
                assoc, 
                ref size);

            if (result.Failed)
            {
                
                Trace.TraceError($"AssocQueryString call failed. {result.Value}");
                throw InteropHelper.GetLastError($"Failed to get file associations for {extension} files.");
            }
            else
            {
                Debug.WriteLine(assoc.ToString());
            }
        }
    }
}
