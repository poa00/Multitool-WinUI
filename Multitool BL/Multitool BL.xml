<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Multitool.BL</name>
    </assembly>
    <members>
        <member name="T:Multitool.NTInterop.InteropWrapper">
            <summary>
            Class to hold p/invoke wrapper methods generated by Win32 C# projections.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.InteropWrapper.GetCursorPosition">
            <summary>
            Get the absolute current cursor position as a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <returns>The absolute cursor position</returns>
        </member>
        <member name="M:Multitool.NTInterop.InteropWrapper.GetCursorPosition(System.Int32@,System.Int32@)">
            <summary>
            Get the absolute current cursor position.
            </summary>
            <param name="x">to hold the x position of the cursor</param>
            <param name="y">to hold the y position of the cursor</param>
        </member>
        <member name="M:Multitool.NTInterop.InteropWrapper.SetWindowsPosition(System.IntPtr,System.Drawing.Point)">
            <summary>
            Sets a window position.
            </summary>
            <param name="windowHandle">HWND for the window</param>
            <param name="newPosition">the new position of the window</param>
        </member>
        <member name="M:Multitool.NTInterop.InteropWrapper.GetFileSize(System.String)">
            <summary>
            Gets the size of a file.
            </summary>
            <param name="fileName">Path to the file</param>
            <returns>The size of the file</returns>
            <exception cref="T:Multitool.NTInterop.OperationFailedException">Thrown if one the <see cref="T:Windows.Win32.PInvoke"/> functions fails.</exception>
        </member>
        <member name="T:Multitool.NTInterop.OperationFailedException">
            <summary>
            Indicates that a given operation has failed.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.OperationFailedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.OperationFailedException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="operationName">the name of the failed operation</param>
            <param name="reason">message for why the operation failed</param>
            <param name="internalEx">internal exception</param>
        </member>
        <member name="T:Multitool.NTInterop.BatteryReportingScale">
            <summary>
            
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.BatteryReportingScale.#ctor(System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="granularity"></param>
            <param name="capacity"></param>
        </member>
        <member name="P:Multitool.NTInterop.BatteryReportingScale.Granularity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.BatteryReportingScale.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.BatteryReportingScale.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Multitool.NTInterop.Power.CpuPowerStates">
            <summary>
            CPU power states (as defined in ACPI)
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.S1Supported">
            <summary>
            S1 state supported
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.S2Supported">
            <summary>
            S2 state supported
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.S3Supported">
            <summary>
            S3 state supported
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.S4Supported">
            <summary>
            Hibernation
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.S5Supported">
            <summary>
            S5 state supported
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Power.CpuPowerStates.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:Multitool.NTInterop.Power.PowerCapabilities">
            <summary>
            Represents the power capabilities of this system
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerCapabilities.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.PowerButtonPresent">
            <summary>
             True if the system has a power button (power on/power off) 
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.SleepButtonPresent">
            <summary>
            True if the system has a sleep button
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.LidPresent">
            <summary>
            True if the system has a lid
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.CpuStates">
            <summary>
            Supported states by the CPU (S states)
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.S1">
            <summary>
            ACPI S1 supported
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.S2">
            <summary>
            ACPI S2 supported
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.S3">
            <summary>
            ACPI S3 allowed
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.S4">
            <summary>
            ACPI S4 supported (hibernation)
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.S5">
            <summary>
            ACPI S5 supported
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.ProcessorThrottle">
            <summary>
            True if throttling is available
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.ProcessorMaxThrottle">
            <summary>
            Current power mode maximal throttle
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.ProcessorMinThrottle">
            <summary>
            Current power mode minimal throttle
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.SystemBatteriesPresent">
            <summary>
            True if the system has batteries (i.e. laptop)
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.BatteriesAreShortTerm">
            <summary>
            True if the batteries are considered short term
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.BatterieScale1">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-battery_reporting_scale
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.BatterieScale2">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-battery_reporting_scale
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.BatterieScale3">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-battery_reporting_scale
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.HibernationFilePresent">
            <summary>
            True if the hibernation file (c:\hiber.sys)
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.FullWake">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.VideoDimPresent">
            <summary>
            True if the system supports video dimming
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.ApmPresent">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.UpsPresent">
            <summary>
            True if an uninterruptible power supply is present
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.ThermalControl">
            <summary>
            Thermal control
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.DiskSpinDown">
            <summary>
            Disk spin down time (minutes)
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.AcOnLineWake">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.SoftLidWake">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.RtcWake">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.MinDeviceWakeState">
            <summary>
            ?
            </summary>
        </member>
        <member name="P:Multitool.NTInterop.Power.PowerCapabilities.DefaultLowLatencyWake">
            <summary>
            ?
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerCapabilities.IsHibernationAllowed">
            <summary>
            Checks if the system allows CPU S4 state, named Hibernation
            </summary>
            <returns>True if hibernation is allowed</returns>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerController.Lock">
            <summary>
            Locks the local computer.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerController.Suspend">
            <summary>
            Suspends (puts in sleep mode) the local computer.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerController.Hibernate">
            <summary>
            Put the local computer in hibernation state (S4).
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerController.Shutdown">
            <summary>
            Shuts down the local computer.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerController.Restart">
            <summary>
            Restarts the local computer.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerOptions.GetActivePowerPlan">
            <summary>
            Get this computer current power plan.
            </summary>
        </member>
        <member name="M:Multitool.NTInterop.Power.PowerOptions.EnumeratePowerPlans">
            <summary>
            Get this computer available power plans.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> of power plans names.</returns>
        </member>
        <member name="F:Multitool.NTInterop.Structs.SYSTEM_POWER_CAPABILITIES.ProcessorMaxThrottle">
            <summary>
            Also known as ProcessorThrottleScale before Windows XP.
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Structs.SYSTEM_POWER_CAPABILITIES.HiberFileType">
            <summary>
            Ignore if earlier than Windows 10 (10.0.10240.0).
            </summary>
        </member>
        <member name="F:Multitool.NTInterop.Structs.SYSTEM_POWER_CAPABILITIES.AoAcConnectivitySupported">
            <summary>
            Ignore if earlier than Windows 10 (10.0.10240.0).
            </summary>
        </member>
        <member name="T:Multitool.Optimisation.ObjectPool`1">
            <summary>
            To pool objects to reduce instanciation delay when using a lot of the same objects.
            </summary>
            <typeparam name="T">Type of the object to pool</typeparam>
        </member>
        <member name="M:Multitool.Optimisation.ObjectPool`1.#ctor">
            <summary>Initialise the pool with the <see cref="F:Multitool.Optimisation.ObjectPool`1.DEFAULT_CAPACITY"/> capacity</summary>
        </member>
        <member name="M:Multitool.Optimisation.ObjectPool`1.#ctor(System.Int32)">
            <summary>Initialise the pool with the <paramref name="capacity"/></summary>
            <param name="capacity">Internal list initial capacity</param>
        </member>
        <member name="M:Multitool.Optimisation.ObjectPool`1.#ctor(System.Object[])">
            <summary>
            Initialise the pool with the <see cref="F:Multitool.Optimisation.ObjectPool`1.DEFAULT_CAPACITY"/>, initialising the <typeparamref name="T"/>
            objects with the <paramref name="constructorParameters"/> parameters
            </summary>
            <param name="constructorParameters">Parameters to initialise the <typeparamref name="T"/> objects with</param>
        </member>
        <member name="M:Multitool.Optimisation.ObjectPool`1.#ctor(System.Int32,System.Object[])">
            <summary>
            Initialise the pool with the specified <paramref name="capacity"/>, initialising the <typeparamref name="T"/>
            objects with the <paramref name="constructorParameters"/> parameters
            </summary>
            <param name="capacity">Internal list initial capacity</param>
            <param name="constructorParameters">Parameters to initialise the <typeparamref name="T"/> objects with</param>
        </member>
        <member name="M:Multitool.Optimisation.ObjectPool`1.GetObject(System.Object[])">
            <summary>
            Gets an object from the pool.
            <para>
            <paramref name="ctorParams"/> represents the parameters of the class constructor 
            (if the constructor is parameter-less put null). It needs to be indexed as the 
            actual constructor parameter. See <seealso cref="M:System.Type.GetConstructor(System.Type[])"/>
            </para>
            </summary>
            <param name="ctorParams">Parameters to feed to the class constructor of the object.</param>
            <returns></returns>
        </member>
        <member name="T:Multitool.Optimisation.PoolableObject">
            <summary>
            Allows for objects to be reused when they are not longer used.
            Mainly used for event data.
            </summary>
        </member>
        <member name="P:Multitool.Optimisation.PoolableObject.InUse">
            <summary>
            Tells if the <see cref="!:IPoolableObject"/> is in use and thus cannot be used by the pool.
            </summary>
        </member>
        <member name="E:Multitool.Optimisation.PoolableObject.Free">
            <summary>
            Fired when the object is free to be reused by the <see cref="T:Multitool.Optimisation.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="M:Multitool.Parsers.UriCleaner.RemoveChariotReturns(System.String@)">
            <summary>
            Removes control chars generated when pressing [RETURN] key.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Multitool.Sorting.QuickSort.SortIndexes``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts the array and returns a tuple of : old index, new index, object
            for each item in the <paramref name="array"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="low"></param>
            <param name="high"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Multitool.Sorting.QuickSort.CheckParameters``1(``0[],System.Int32,System.Int32)" -->
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array.
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.RECT">
            <summary>The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.</summary>
            <remarks>
            <para>The RECT structure is identical to the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rectl">RECTL</a> structure.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//windef/ns-windef-rect#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.left">
            <summary>Specifies the <i>x</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.top">
            <summary>Specifies the <i>y</i>-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.right">
            <summary>Specifies the <i>x</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Windows.Win32.Foundation.RECT.bottom">
            <summary>Specifies the <i>y</i>-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "Kernel32.dll".
            </content>
            <content>
            Contains extern methods from "User32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.CloseHandle(Windows.Win32.Foundation.HANDLE)">
            <summary>Closes an open object handle.</summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the application is running under a debugger,  the function will throw an exception if it receives either a  handle value that is not valid  or a pseudo-handle value. This can happen if you close a handle twice, or if you  call <b>CloseHandle</b> on a handle returned by the <a href="/windows/desktop/api/fileapi/nf-fileapi-findfirstfilea">FindFirstFile</a> function instead of calling the <a href="/windows/desktop/api/fileapi/nf-fileapi-findclose">FindClose</a> function.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//handleapi/nf-handleapi-closehandle">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(System.String,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,System.Nullable{Windows.Win32.Security.SECURITY_ATTRIBUTES},Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,System.Runtime.InteropServices.SafeHandle)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.Security.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.Foundation.HANDLE)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CreateFile(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Storage.FileSystem.FILE_ACCESS_FLAGS,Windows.Win32.Storage.FileSystem.FILE_SHARE_MODE,Windows.Win32.Security.SECURITY_ATTRIBUTES*,Windows.Win32.Storage.FileSystem.FILE_CREATION_DISPOSITION,Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES,Windows.Win32.Foundation.HANDLE)">
            <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows:\_file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
            <param name="lpFileName">
            <para>The name of the file or device to be created or opened. You may use either forward slashes (/) or backslashes (\\) in this name. In the ANSI version of this function, the name is limited to <b>MAX_PATH</b> characters. To extend this limit to 32,767 wide characters, use this Unicode version of the function and prepend "\\\\?\\" to the path. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a>. For information on special device names, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/defining-an-ms-dos-device-name">Defining an MS-DOS Device Name</a>. To create a file stream, specify the name of the file, a colon, and then the name of the stream. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-streams">File Streams</a>. <div class="alert"><b>Tip</b>  Starting with Windows 10, version 1607, for the unicode version of this function (<b>CreateFileW</b>), you can opt-in to remove the <b>MAX_PATH</b> limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of <a href="https://docs.microsoft.com/windows/desktop/FileIO/naming-a-file">Naming Files, Paths, and Namespaces</a> for details.</div> <div> </div></para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwDesiredAccess">
            <para>The requested access to the file or device, which can be summarized as read, write, both or neither zero). The most commonly used values are <b>GENERIC_READ</b>, <b>GENERIC_WRITE</b>, or both (<c>GENERIC_READ | GENERIC_WRITE</c>). For more information, see <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/generic-access-rights">Generic Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-security-and-access-rights">File Security and Access Rights</a>, <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-access-rights-constants">File Access Rights Constants</a>, and <a href="https://docs.microsoft.com/windows/desktop/SecAuthZ/access-mask">ACCESS_MASK</a>. If this parameter is zero, the application can query certain metadata such as file, directory, or device attributes without accessing that file or device, even if <b>GENERIC_READ</b> access would have been denied. You cannot request an access mode that conflicts with the sharing mode that is specified by the <i>dwShareMode</i> parameter in an open request that already has an open handle. For more information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwShareMode">
            <para>The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag. If this parameter is zero and <b>CreateFile</b> succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed. For more information, see the Remarks section. You cannot request a sharing mode that conflicts with the access mode that is specified in an existing request that has an open handle. <b>CreateFile</b> would fail and the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function would return <b>ERROR_SHARING_VIOLATION</b>. To enable a process to share a file or device while another process has the file or device open, use a</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpSecurityAttributes">
            <para>A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes. This parameter can be <b>NULL</b>. If this parameter is <b>NULL</b>, the handle returned by <b>CreateFile</b> cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor. The <b>lpSecurityDescriptor</b> member of the structure specifies a <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for a file or device. If this member is <b>NULL</b>, the file or device associated with the returned handle is assigned a default security descriptor. <b>CreateFile</b> ignores the <b>lpSecurityDescriptor</b> member when opening an existing file or device, but continues to use the <b>bInheritHandle</b> member. The <b>bInheritHandle</b>member of the structure specifies whether the returned handle can be inherited. For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwCreationDisposition">
            <para>An action to take on a file or device that exists or does not exist. For devices other than files, this parameter is usually set to <b>OPEN_EXISTING</b>. For more information, see the Remarks section.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwFlagsAndAttributes">
            <para>The file or device attributes and flags, <b>FILE_ATTRIBUTE_NORMAL</b> being the most common default value for files. This parameter can include any combination of the available file attributes (<b>FILE_ATTRIBUTE_*</b>). All other file attributes override <b>FILE_ATTRIBUTE_NORMAL</b>. This parameter can also contain combinations of flags (<b>FILE_FLAG_*</b>) for control of file or device caching behavior, access modes, and other special-purpose flags. These combine with any <b>FILE_ATTRIBUTE_*</b> values. This parameter can also contain Security Quality of Service (SQOS) information by specifying the <b>SECURITY_SQOS_PRESENT</b> flag. Additional SQOS-related flags information is presented in the table following the attributes and flags tables. <div class="alert"><b>Note</b>  When <b>CreateFile</b> opens an existing file, it generally combines the file flags with the file attributes of the existing file, and ignores any file attributes supplied as part of <i>dwFlagsAndAttributes</i>. Special cases are detailed in <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>.</div> <div> </div> Some of the following file attributes and flags may only apply to files and not necessarily all other types of devices that <b>CreateFile</b> can open. For additional information, see the Remarks section of this topic and <a href="https://docs.microsoft.com/windows/desktop/FileIO/creating-and-opening-files">Creating and Opening Files</a>. For more advanced access to file attributes, see <a href="https://docs.microsoft.com/windows/desktop/api/fileapi/nf-fileapi-setfileattributesa">SetFileAttributes</a>. For a complete list of all file attributes with their values and descriptions, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-attribute-constants">File Attribute Constants</a>. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hTemplateFile">
            <para>A valid handle to a template file with the <b>GENERIC_READ</b> access right. The template file supplies file attributes and extended attributes for the file that is being created. This parameter can be <b>NULL</b>. When opening an existing file, <b>CreateFile</b> ignores this parameter. When opening a new encrypted file, the file inherits the discretionary access control list from its parent directory. For additional information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-encryption">File Encryption</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot. If the function fails, the return value is <b>INVALID_HANDLE_VALUE</b>. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-createfilew">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileSizeEx(System.Runtime.InteropServices.SafeHandle,System.Int64@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetFileSizeEx(Windows.Win32.Foundation.HANDLE,System.Int64*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetFileSizeEx(Windows.Win32.Foundation.HANDLE,System.Int64*)">
            <summary>Retrieves the size of the specified file.</summary>
            <param name="hFile">
            <para>A handle to the file. The handle must have been created with the <b>FILE_READ_ATTRIBUTES</b> access right or equivalent, or the caller must have sufficient permission on the directory that contains the file. For more information, see <a href="https://docs.microsoft.com/windows/desktop/FileIO/file-security-and-access-rights">File Security and Access Rights</a>.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getfilesizeex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpFileSize">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a> structure that receives the file size, in bytes.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getfilesizeex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//fileapi/nf-fileapi-getfilesizeex">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowPos(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.HWND,System.Int32,System.Int32,System.Int32,System.Int32,Windows.Win32.UI.WindowsAndMessaging.SET_WINDOW_POS_FLAGS)">
            <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hWndInsertAfter">Type: <b>HWND</b></param>
            <param name="X">
            <para>Type: <b>int</b> The new position of the left side of the window, in client coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Y">
            <para>Type: <b>int</b> The new position of the top of the window, in client coordinates.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cx">
            <para>Type: <b>int</b> The new width of the window, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cy">
            <para>Type: <b>int</b> The new height of the window, in pixels.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="uFlags">Type: <b>UINT</b></param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-setwindowpos">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)">
            <summary>Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpRect">
            <para>Type: <b>LPRECT</b> A pointer to a  <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//winuser/nf-winuser-getwindowrect">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="T:Windows.Win32.Security.SECURITY_ATTRIBUTES">
            <summary>The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable.</summary>
            <remarks>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.nLength">
            <summary>The size, in bytes, of this structure. Set this value to the size of the **SECURITY\_ATTRIBUTES** structure.</summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            <para>A pointer to a [**SECURITY\_DESCRIPTOR**](../winnt/ns-winnt-security_descriptor.md) structure that controls access to the object. If the value of this member is **NULL**, the object is assigned the default security descriptor associated with the [*access token*](/windows/win32/secauthz/access-tokens) of the calling process. This is not the same as granting access to everyone by assigning a **NULL** [*discretionary access control list*](/windows/win32/secauthz/dacls-and-aces) (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token. For information about creating a security descriptor, see [Creating a Security Descriptor](/windows/win32/secauthz/creating-a-security-descriptor-for-a-new-object-in-c--).</para>
            <para><see href="https://docs.microsoft.com/windows/win32/api//wtypesbase/ns-wtypesbase-security_attributes#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Security.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is **TRUE**, the new process inherits the handle.</summary>
        </member>
    </members>
</doc>
