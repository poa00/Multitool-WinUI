using System;
using System.Drawing;
using System.Runtime.InteropServices;

using Windows.Win32;
using Windows.Win32.Foundation;
using Windows.Win32.UI.WindowsAndMessaging;
using Windows.Win32.Storage.FileSystem;
using Windows.Win32.Security;
using Microsoft.Win32.SafeHandles;
using System.Diagnostics;

namespace Multitool.NTInterop
{
    /// <summary>
    /// Class to hold p/invoke wrapper methods generated by Win32 C# projections.
    /// </summary>
    public static class InteropWrapper
    {
        [DllImport("user32.dll")]
        static extern bool GetCursorPos(out ulong _lpPoint);

        /// <summary>
        /// Get the absolute current cursor position as a <see cref="Point"/>.
        /// </summary>
        /// <returns>The absolute cursor position</returns>
        public static Point GetCursorPosition()
        {
            if (!GetCursorPos(out ulong pos))
            {
                throw InteropHelper.GetLastError("Failed to get cursor position ('GetCursorPos')");
            }
            int x = (int)(pos & 0x00000000FFFFFFFF);
            int y = (int)((pos & 0xFFFFFFFF00000000) >> 32);
            return new Point(x, y);
        }

        /// <summary>
        /// Get the absolute current cursor position.
        /// </summary>
        /// <param name="x">to hold the x position of the cursor</param>
        /// <param name="y">to hold the y position of the cursor</param>
        public static void GetCursorPosition(out int x, out int y)
        {
            if (!GetCursorPos(out ulong pos))
            {
                throw InteropHelper.GetLastError("Failed to get cursor position ('GetCursorPos')");
            }
            x = (int)(pos & 0x00000000FFFFFFFF);
            y = (int)((pos & 0xFFFFFFFF00000000) >> 32);
        }

        /// <summary>
        /// Sets a window position.
        /// </summary>
        /// <param name="windowHandle">HWND for the window</param>
        /// <param name="newPosition">the new position of the window</param>
        public static void SetWindowsPosition(IntPtr windowHandle, Point newPosition)
        {
            HWND hwnd = Marshal.PtrToStructure<HWND>(windowHandle);

            if (!PInvoke.GetWindowRect(hwnd, out RECT rect))
            {
                throw InteropHelper.GetLastError("'GetWindowRect' failed");
            }

            Size s = new()
            {
                Height = rect.bottom - rect.top,
                Width = rect.right - rect.left
            };

            if (!PInvoke.SetWindowPos(hwnd, new(-1), newPosition.X, newPosition.Y, s.Width, s.Height, SET_WINDOW_POS_FLAGS.SWP_NOMOVE))
            {
                throw InteropHelper.GetLastError("'SetWindowPos' failed");
            }
        }

        /// <summary>
        /// Gets the size of a file.
        /// </summary>
        /// <param name="fileName">Path to the file</param>
        /// <returns>The size of the file</returns>
        /// <exception cref="OperationFailedException">Thrown if one the <see cref="PInvoke"/> functions fails.</exception>
        public static long GetFileSize(string fileName)
        {
            SafeFileHandle handle = PInvoke.CreateFile(
                fileName,
                FILE_ACCESS_FLAGS.FILE_READ_DATA,
                FILE_SHARE_MODE.FILE_SHARE_READ,
                null,
                FILE_CREATION_DISPOSITION.OPEN_EXISTING,
                FILE_FLAGS_AND_ATTRIBUTES.FILE_ATTRIBUTE_READONLY,
                null
                );
            if (handle != null)
            {
                if (PInvoke.GetFileSizeEx(handle, out long size))
                {
                    return size;
                }
                else
                {
                    throw new OperationFailedException($"Unable to get \"{fileName}\" size. GetFileSizeEx returned false.", null);
                }
            }
            else
            {
                //Trace.TraceError($"{nameof(InteropWrapper)} : Cannot open \"{fileName}\", handle was null.");
                throw new OperationFailedException($"Cannot open \"{fileName}\", handle was null.", null);
            }
        }
    }
}
